using System;
using System.Collections.Generic;
using System.Text;

namespace Cs
{
    class Program
    {
        static void Main(string[] args)
        {
            string read;

            read = Console.ReadLine();
            int n = int.Parse(read.Split()[0]);
            int m = int.Parse(read.Split()[1]);

            int[,] paint = new int[n + 2, m + 2];
            int k = 0;
            for (int i = 1; i <= n; i++)
            {
                read = Console.ReadLine();

                for (k = 0; k < m; k++)
                {
                    int x = int.Parse(read.Split()[k]);

                    paint[i, k + 1] = x;
                }
            }

            int[,] visit = new int[n+1,m+1];
            int area = 0;
            int maxArea = 0;
            int count = 0;
            Queue<Tuple<int, int>> queue = new Queue<Tuple<int, int>>();
            int[] dx = new int[] { 1,0,-1,0};
            int[] dy = new int[] { 0,1,0,-1 };
            BFS(0);
            Console.WriteLine(count);
            Console.WriteLine(maxArea);

            void BFS(int x)
            {
                for(int i = 1; i <= n; i++)
                {
                    for(int j = 1; j <=m; j++)
                    {
                        if (visit[i, j] == 1 || paint[i,j] == 0)
                            continue;

                        visit[i, j] = 1;
                        count++;
                        area = 0;
                        queue.Enqueue(new Tuple<int, int>(i, j));

                        while(queue.Count != 0)
                        {
                            area++;
                            Tuple<int, int> tuple = queue.Dequeue();

                            for(int k = 0; k <4; k++)
                            {
                                int nx = tuple.Item1 + dx[k];
                                int ny = tuple.Item2 + dy[k];
                                if(paint[nx,ny] == 1 &&
                                    visit[nx,ny] == 0)
                                {
                                    visit[nx,ny] = 1;
                                    queue.Enqueue(new Tuple<int,int>(nx,ny));
                                }
                            }
                        }
                        if (maxArea < area)
                            maxArea = area;
                    }
                }
            }

        }

    }
}
