using System;
using System.Collections.Generic;
using System.Text;

namespace Cs
{
    class Program
    {
        static void Main(string[] args)
        {
            string read;

            read = Console.ReadLine();

            int t = int.Parse(read);
            for (int i = 0; i < t; i++)
            {
                read = Console.ReadLine();
                int n = int.Parse(read);

                int[,] board = new int[n, n];
                int[,] dist = new int[n, n];
                int[,] visit = new int[n, n];

                Queue<(int, int)> queue = new Queue<(int, int)>();

                read = Console.ReadLine();

                int curX = int.Parse(read.Split()[0]);
                int curY = int.Parse(read.Split()[1]);

                read = Console.ReadLine();

                int dstX = int.Parse(read.Split()[0]);
                int dstY = int.Parse(read.Split()[1]);

                (int, int)[] dir = { (-2, 1), (-1, 2), (1, 2), (2, 1), (-2, -1), (-1, -2), (1, -2), (2, -1) };
                queue.Enqueue((curX, curY));


                while(queue.Count != 0)
                {
                    var pair = queue.Dequeue();
                    visit[pair.Item1, pair.Item2] = 1;

                    for(int a = 0; a<dir.Length; a++)
                    {
                        int nx = pair.Item1 + dir[a].Item1;
                        int ny = pair.Item2 + dir[a].Item2;

                        if (nx < 0 || ny < 0 || nx >= n || ny >= n) continue;
                        if (visit[nx, ny] == 1) continue;

                        dist[nx, ny] = dist[pair.Item1, pair.Item2] + 1;
                        visit[nx, ny] = 1;

                        queue.Enqueue((nx, ny));
                    }
                }

                Console.WriteLine(dist[dstX, dstY]);
            }
         
            


        }
    }
}
