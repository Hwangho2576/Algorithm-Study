using System;
using System.Collections.Generic;
using System.Text;

namespace Cs
{
    class Program
    {
        static void Main(string[] args)
        {
            string[] read;

            read = Console.ReadLine().Split();

            int n = int.Parse(read[1]);
            int m = int.Parse(read[0]);
            int l = int.Parse(read[2]);

            int[,,] board = new int[n, m, l];
            int[,,] visit = new int[n, m, l];
            int[,,] dist = new int[n, m, l];
            Queue<(int, int, int)> queue = new Queue<(int, int, int)>();

            
            for(int i = 0; i< l; i++)
            {
                for(int j = 0; j <n; j++)
                {
                    read = Console.ReadLine().Split();

                    for(int k = 0; k < m; k++)
                    {
                        board[j, k, i] = int.Parse(read[k]);
                        if (board[j, k, i] == 1)
                            queue.Enqueue((j, k, i));
                    }
                }
            }

            int[] dx = { -1, 1, 0, 0, 0, 0 };
            int[] dy = { 0, 0, -1, 1, 0, 0 };
            int[] dz = { 0, 0, 0, 0, -1, 1 };
            
            while(queue.Count != 0)
            {
                var pair = queue.Dequeue();
                for(int a = 0; a <6; a++)
                {
                    int nx = pair.Item1 + dx[a];
                    int ny = pair.Item2 + dy[a];
                    int nz = pair.Item3 + dz[a];

                    if (nx < 0 || ny < 0 || nz < 0 ||
                        nx >= n || ny >= m || nz >= l)
                        continue;

                    if (visit[nx, ny, nz] == 1 || board[nx, ny, nz] != 0)
                        continue;

                    visit[nx, ny, nz] = 1;
                    dist[nx, ny, nz] = dist[pair.Item1, pair.Item2, pair.Item3] + 1;
                    queue.Enqueue((nx, ny, nz));
                }
            }

            int max = 0;
            for (int i = 0; i < l; i++)
            {
                for (int j = 0; j < n; j++)
                {
                    
                    for (int k = 0; k < m; k++)
                    {
                        max = Math.Max(max, dist[j,k,i]);
                        if (dist[j,k,i] == 0 && board[j,k,i] == 0)
                        {
                            Console.WriteLine(-1);
                            return;
                        }
                    }
                }
            }
            Console.WriteLine(max);
        }



    }
}
