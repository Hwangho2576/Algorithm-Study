using System;
using System.Collections.Generic;
using System.Text;

namespace Cs
{
    class Program
    {
        static void Main(string[] args)
        {
            string read;

            read = Console.ReadLine();
            int n = int.Parse(read.Split()[0]);
            int m = int.Parse(read.Split()[1]);

            int[,,] dist = new int[n, m, 2];
            int[,] board = new int[n, m];
            for(int i = 0; i< n; i++)
            {
                read = Console.ReadLine();

                for(int j = 0; j <m; j++)
                {
                    board[i, j] = int.Parse(read[j].ToString());
                    dist[i, j, 0] = -1;
                    dist[i, j, 1] = -1;
                }
            }

            Queue<(int, int, int)> queue = new Queue<(int, int, int)>();
            int[] dx = { -1, 1, 0, 0 };
            int[] dy = { 0, 0, -1, 1 };
            dist[0, 0, 0] = 1;
            dist[0, 0, 1] = 1;

            queue.Enqueue((0, 0, 0));

            while(queue.Count != 0)
            {
                (int, int, int) pair = queue.Dequeue();
                int broken = pair.Item3;

                if(pair.Item1 == n-1 && pair.Item2 == m-1)
                {
                    Console.WriteLine(dist[pair.Item1, pair.Item2, broken]);
                    return;
                }

                for (int i = 0; i < 4; i++)
                {
                    int nx = pair.Item1 + dx[i];
                    int ny = pair.Item2 + dy[i];

                    if (nx < 0 || ny < 0 || nx >= n || ny >= m)
                        continue;

                    if (board[nx, ny] == 0 && dist[nx,ny,broken] == -1)
                    {
                        queue.Enqueue((nx, ny, broken));
                        dist[nx, ny, broken] = dist[pair.Item1, pair.Item2, broken] + 1;
                    }

                    if(broken == 0 && board[nx,ny] == 1 && dist[nx,ny,1] == -1)
                    {
                        queue.Enqueue((nx, ny, 1));
                        dist[nx,ny,1] = dist[pair.Item1, pair.Item2, broken] + 1;
                    }
                }
            }

            Console.WriteLine(-1);
        }
    }
}
